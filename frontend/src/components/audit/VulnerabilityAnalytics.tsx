'use client';

import { useMemo } from 'react';
import { TrendingUp, TrendingDown, AlertTriangle, Shield, Target, Zap } from 'lucide-react';
import { Card } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import { ProgressBar } from '@/components/ui/ProgressBar';
import type { Vulnerability } from '@/types/audit';

interface VulnerabilityAnalyticsProps {
  vulnerabilities: Vulnerability[];
  auditScore: number;
}

interface SecurityMetric {
  label: string;
  value: number;
  maxValue: number;
  trend: 'up' | 'down' | 'neutral';
  icon: React.ComponentType<{ className?: string }>;
  color: string;
}

export function VulnerabilityAnalytics({ vulnerabilities, auditScore }: VulnerabilityAnalyticsProps) {
  const analytics = useMemo(() => {
    const severityCounts = vulnerabilities.reduce(
      (acc, vuln) => {
        acc[vuln.severity] = (acc[vuln.severity] || 0) + 1;
        return acc;
      },
      {} as Record<string, number>
    );

    const totalIssues = vulnerabilities.length;
    const criticalIssues = severityCounts.critical || 0;
    const highIssues = severityCounts.high || 0;
    const mediumIssues = severityCounts.medium || 0;
    const lowIssues = severityCounts.low || 0;

    // Calculate risk score (0-100, lower is better)
    const riskScore = Math.min(100, 
      (criticalIssues * 25) + 
      (highIssues * 15) + 
      (mediumIssues * 10) + 
      (lowIssues * 5)
    );

    // Calculate security coverage (0-100, higher is better)
    const securityCoverage = Math.max(0, 100 - riskScore);

    // Calculate complexity score based on vulnerability types
    const complexityScore = Math.min(100, totalIssues * 5);

    return {
      totalIssues,
      criticalIssues,
      highIssues,
      mediumIssues,
      lowIssues,
      riskScore,
      securityCoverage,
      complexityScore,
      severityCounts,
    };
  }, [vulnerabilities]);

  const metrics: SecurityMetric[] = [
    {
      label: 'Security Coverage',
      value: analytics.securityCoverage,
      maxValue: 100,
      trend: analytics.securityCoverage >= 80 ? 'up' : analytics.securityCoverage >= 60 ? 'neutral' : 'down',
      icon: Shield,
      color: analytics.securityCoverage >= 80 ? 'text-green-400' : analytics.securityCoverage >= 60 ? 'text-yellow-400' : 'text-red-400',
    },
    {
      label: 'Risk Level',
      value: 100 - analytics.riskScore,
      maxValue: 100,
      trend: analytics.riskScore <= 20 ? 'up' : analytics.riskScore <= 50 ? 'neutral' : 'down',
      icon: AlertTriangle,
      color: analytics.riskScore <= 20 ? 'text-green-400' : analytics.riskScore <= 50 ? 'text-yellow-400' : 'text-red-400',
    },
    {
      label: 'Code Quality',
      value: auditScore,
      maxValue: 100,
      trend: auditScore >= 80 ? 'up' : auditScore >= 60 ? 'neutral' : 'down',
      icon: Target,
      color: auditScore >= 80 ? 'text-green-400' : auditScore >= 60 ? 'text-yellow-400' : 'text-red-400',
    },
    {
      label: 'Optimization',
      value: Math.max(0, 100 - analytics.complexityScore),
      maxValue: 100,
      trend: analytics.complexityScore <= 20 ? 'up' : analytics.complexityScore <= 50 ? 'neutral' : 'down',
      icon: Zap,
      color: analytics.complexityScore <= 20 ? 'text-green-400' : analytics.complexityScore <= 50 ? 'text-yellow-400' : 'text-red-400',
    },
  ];

  const severityDistribution = [
    { severity: 'critical', count: analytics.criticalIssues, color: 'bg-red-500' },
    { severity: 'high', count: analytics.highIssues, color: 'bg-orange-500' },
    { severity: 'medium', count: analytics.mediumIssues, color: 'bg-yellow-500' },
    { severity: 'low', count: analytics.lowIssues, color: 'bg-green-500' },
  ].filter(item => item.count > 0);

  return (
    <div className="space-y-6">
      {/* Security Metrics Grid */}
      <div className="grid grid-cols-2 gap-4">
        {metrics.map((metric) => {
          const Icon = metric.icon;
          const TrendIcon = metric.trend === 'up' ? TrendingUp : 
                           metric.trend === 'down' ? TrendingDown : 
                           Target;
          
          return (
            <div key={metric.label} className="rounded-lg bg-dark-900/50 p-4">
              <div className="flex items-center justify-between mb-2">
                <Icon className={`h-5 w-5 ${metric.color}`} />
                <TrendIcon className={`h-4 w-4 ${
                  metric.trend === 'up' ? 'text-green-400' : 
                  metric.trend === 'down' ? 'text-red-400' : 
                  'text-yellow-400'
                }`} />
              </div>
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm text-dark-300">{metric.label}</span>
                  <span className={`text-lg font-bold ${metric.color}`}>
                    {Math.round(metric.value)}%
                  </span>
                </div>
                <ProgressBar
                  value={metric.value}
                  max={metric.maxValue}
                  className="h-1"
                />
              </div>
            </div>
          );
        })}
      </div>

      {/* Severity Distribution */}
      {severityDistribution.length > 0 && (
        <Card title="Issue Distribution" className="p-4">
          <div className="space-y-3">
            {severityDistribution.map((item) => (
              <div key={item.severity} className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className={`h-3 w-3 rounded-full ${item.color}`} />
                  <span className="text-sm capitalize text-dark-300">
                    {item.severity}
                  </span>
                </div>
                <div className="flex items-center space-x-2">
                  <Badge variant={item.severity as any}>
                    {item.count}
                  </Badge>
                  <span className="text-xs text-dark-500">
                    {Math.round((item.count / analytics.totalIssues) * 100)}%
                  </span>
                </div>
              </div>
            ))}
          </div>
        </Card>
      )}

      {/* Security Recommendations */}
      <Card title="Security Recommendations" className="p-4">
        <div className="space-y-2 text-sm">
          {analytics.criticalIssues > 0 && (
            <div className="flex items-start space-x-2 text-red-400">
              <AlertTriangle className="h-4 w-4 mt-0.5 flex-shrink-0" />
              <span>Address {analytics.criticalIssues} critical security issue{analytics.criticalIssues > 1 ? 's' : ''} immediately</span>
            </div>
          )}
          {analytics.highIssues > 0 && (
            <div className="flex items-start space-x-2 text-orange-400">
              <AlertTriangle className="h-4 w-4 mt-0.5 flex-shrink-0" />
              <span>Review {analytics.highIssues} high-priority issue{analytics.highIssues > 1 ? 's' : ''}</span>
            </div>
          )}
          {auditScore >= 80 && (
            <div className="flex items-start space-x-2 text-green-400">
              <Shield className="h-4 w-4 mt-0.5 flex-shrink-0" />
              <span>Contract meets security standards - consider deployment</span>
            </div>
          )}
          {analytics.totalIssues === 0 && (
            <div className="flex items-start space-x-2 text-green-400">
              <Shield className="h-4 w-4 mt-0.5 flex-shrink-0" />
              <span>No security issues detected - excellent work!</span>
            </div>
          )}
        </div>
      </Card>
    </div>
  );
}
