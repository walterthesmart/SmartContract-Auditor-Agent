'use client';

import { useState } from 'react';
import { ChevronDown, ChevronRight, MapPin, Lightbulb } from 'lucide-react';
import { Badge } from '@/components/ui/Badge';
import type { Vulnerability } from '@/types/audit';

interface VulnerabilityListProps {
  vulnerabilities: Vulnerability[];
}

interface VulnerabilityItemProps {
  vulnerability: Vulnerability;
}

function VulnerabilityItem({ vulnerability }: VulnerabilityItemProps): JSX.Element {
  const [isExpanded, setIsExpanded] = useState(false);

  return (
    <div className="rounded-lg border border-dark-700 bg-dark-800/30 p-3 transition-colors hover:bg-dark-800/50">
      <div
        className="flex cursor-pointer items-start justify-between"
        onClick={() => setIsExpanded(!isExpanded)}
      >
        <div className="flex-1">
          <div className="flex items-center space-x-2">
            <Badge variant={vulnerability.severity as 'critical' | 'high' | 'medium' | 'low' | 'info'}>
              {vulnerability.severity.toUpperCase()}
            </Badge>
            <div className="flex items-center space-x-1 text-xs text-dark-400">
              <MapPin className="h-3 w-3" />
              <span>Line {vulnerability.location.line}</span>
              {vulnerability.location.function && (
                <span>in {vulnerability.location.function}()</span>
              )}
            </div>
          </div>
          <h5 className="mt-1 font-medium text-white">{vulnerability.title}</h5>
          <p className="mt-1 text-sm text-dark-300 line-clamp-2">
            {vulnerability.description}
          </p>
        </div>
        <button className="ml-2 flex-shrink-0 text-dark-400 hover:text-white">
          {isExpanded ? (
            <ChevronDown className="h-4 w-4" />
          ) : (
            <ChevronRight className="h-4 w-4" />
          )}
        </button>
      </div>

      {isExpanded && (
        <div className="mt-3 space-y-3 border-t border-dark-700 pt-3">
          <div>
            <h6 className="text-sm font-medium text-dark-300">Description</h6>
            <p className="mt-1 text-sm text-dark-400">{vulnerability.description}</p>
          </div>

          {vulnerability.recommendation && (
            <div>
              <h6 className="flex items-center space-x-1 text-sm font-medium text-dark-300">
                <Lightbulb className="h-4 w-4" />
                <span>Recommendation</span>
              </h6>
              <p className="mt-1 text-sm text-dark-400">{vulnerability.recommendation}</p>
            </div>
          )}

          {vulnerability.references && vulnerability.references.length > 0 && (
            <div>
              <h6 className="text-sm font-medium text-dark-300">References</h6>
              <ul className="mt-1 space-y-1">
                {vulnerability.references.map((ref, index) => (
                  <li key={index}>
                    <a
                      href={ref}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-sm text-primary-400 hover:text-primary-300 hover:underline"
                    >
                      {ref}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      )}
    </div>
  );
}

export function VulnerabilityList({ vulnerabilities }: VulnerabilityListProps): JSX.Element {
  if (vulnerabilities.length === 0) {
    return (
      <div className="rounded-lg border-2 border-dashed border-dark-600 p-6 text-center">
        <div className="text-dark-400">
          <Shield className="mx-auto mb-2 h-8 w-8" />
          <p className="text-sm">No vulnerabilities found</p>
          <p className="mt-1 text-xs">Run an audit to see security analysis</p>
        </div>
      </div>
    );
  }

  // Sort vulnerabilities by severity
  const severityOrder = { critical: 0, high: 1, medium: 2, low: 3, info: 4 };
  const sortedVulnerabilities = [...vulnerabilities].sort(
    (a, b) => severityOrder[a.severity as keyof typeof severityOrder] - 
              severityOrder[b.severity as keyof typeof severityOrder]
  );

  return (
    <div className="space-y-2">
      <h4 className="text-sm font-medium text-dark-300">
        Vulnerabilities ({vulnerabilities.length})
      </h4>
      <div className="max-h-64 space-y-2 overflow-y-auto scrollbar-thin">
        {sortedVulnerabilities.map((vulnerability) => (
          <VulnerabilityItem key={vulnerability.id} vulnerability={vulnerability} />
        ))}
      </div>
    </div>
  );
}

// Import Shield icon
import { Shield } from 'lucide-react';
